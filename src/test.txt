private static final int NR_OF_ROWS = 2;
private static final int NR_OF_BTNS_PER_ROW = 10;

//------------------------------------------------------------------------------
@Test
public void testIteratorObject() throws Exception{
  logger.info("<<<Testing iterator object>>>");
  ButoaneNivel02 btnGenerator = new ButoaneNivel02();
  btnGenerator.setNumberOfRows(NR_OF_ROWS);
  btnGenerator.setNumberOfButtonsPerRow(NR_OF_BTNS_PER_ROW);
  if(btnGenerator istanceof IButoaneNivel02){
    logger.info("btnGenerator istanceof IButoaneNivel02 -> TRUE");
  }
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
@Test
public void testObserverObject() throws Exception{
  logger.info("<<<Testing observer object>>>");
  logger.info("Crearea de 3 obiecte de tipul SituatieJocObserver");
  SituatieJocObserver situatieJocObserver1 = new SituatieJocObserver(new ISubject(){});
  SituatieJocObserver situatieJocObserver2 = new SituatieJocObserver(new ISubject(){});
  SituatieJocObserver situatieJocObserver3 = new SituatieJocObserver(new ISubject(){});
  if(situatieJocObserver1 istanceof IObserver){
    logger.info("situatieJocObserver1 istanceof IObserver -> TRUE");
  }
}
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
@Test
public void testCompositeObject() throws Exception{
  logger.info("<<<Testing composite object>>>");
  int cadreCerute = 2;
  Cadru cadru = new Cadru(cadreCerute);
  List<Rectangle> listaCadre = cadru.getCadre();
  if(listaCadre.size() == cadreCerute){
    logger.info("Lista de cadre cerute si primite sunt egale !");
  }
}
//------------------------------------------------------------------------------



//--------------------------------------------------------------------------------------------------------------------
@Test
public void testIteratorObject2() throws Exception{
  logger.info("<<<Testing iterator object 2>>>");
  IteratorButoane itBtns = new IteratorButoane();
  if(itBtns istanceof IIteratorNivel02){
    logger.info("itBtns istanceof IIteratorNivel02 -> TRUE");
  }
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
@Test
public void testCalcularePozitiObiecteNivel02() throws Exception{
 ArrayList<String> listaPozitiObiecte = GameHelperPosition.calcularePozitiNivel02(800,400,2,4);
 for(int i = 0 ; i < listaPozitiObiecte.size() ; i ++){
    System.out.println(listaPozitiObiecte.get(i));
 }
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
@Test
public void testCalcularePozitiObiecteNivel02() throws Exception{
  int width = 800;
  int height = 400;
  String element = "RED";
  System.out.println("X= "+GameHelperPosition.calcXNameApp(width));
  System.out.println("Y= "+GameHelperPosition.calcYNameApp(height,element));
}
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
@Test
public void testObserverObject2() throws Exception{
 SituatieJocSubject situatieJocSubject = new SituatieJocSubject();
 if(situatieJocSubject instaceof ISubject){
    logger.info("situatieJocSubject instaceof ISubject -> TRUE");
 }
}
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
@Test
public void testContextAplicatie(){
 ContextAplicatie APP_INFO = INVOKEAppProperties.contextAplicatieProcessed();
 System.out.println("Nume APP: "+APP_INFO.getThemeColor());
 System.out.println("Icon APP: "+APP_INFO.getIconURL());
 System.out.println("Lungime APP: "+APP_INFO.getLungimeAplicatie());
 System.out.println("Latime APP: "+APP_INFO.getLatimeAplicatie());
}
//------------------------------------------------------------------------------


